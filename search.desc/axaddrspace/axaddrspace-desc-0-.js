searchState.loadedDescShard("axaddrspace", 0, "ArceOS-Hypervisor guest VM address space management module.\nThe virtual memory address space.\nAllocation mapping backend.\nHardware abstraction layer for memory management.\nA unified enum type for different memory mapping backends.\nThe memory is device memory.\nThe memory is executable.\nA stateful accessor to the memory space of a guest\nGuest physical address.\nGuest physical address range.\nGuest virtual address.\nGuest virtual address range.\nHost physical address.\nHost virtual address.\nLinear mapping backend.\nGeneric page table entry flags that indicate the …\nInformation about nested page faults.\nA physical frame which will be automatically deallocated …\nThe memory is readable.\nThe memory is uncached.\nThe memory is user accessible.\nThe memory is writable.\nAccess type that caused the nested page fault.\nGet a flags value with all known bits set.\nAllocate a <code>PhysFrame</code>.\nAllocates a frame and returns its host physical address. …\nAllocate a <code>PhysFrame</code> and fill it with zeros.\nGet a mutable pointer to the frame.\nConverts an <code>GuestVirtAddr</code> to an <code>usize</code>.\nConverts an <code>GuestPhysAddr</code> to an <code>usize</code>.\nReturns the address space base.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nRemoves all mappings in the address space.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nChecks if the address space contains the given address …\nDeallocates a frame given its physical address.\nDefinitions about device accessing.\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nReturns the address space end.\nThe upper bound of the range (exclusive).\nThe upper bound of the range (exclusive).\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGuest physical address that caused the nested page fault.\nFill the frame with a byte. Works only when the frame is 4 …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nConverts an <code>usize</code> to an <code>GuestVirtAddr</code>.\nConverts an <code>usize</code> to an <code>GuestPhysAddr</code>.\nHandles a page fault at the given address.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nAdd a new allocation mapping.\nAdd a new linear mapping.\nCreates a new allocation mapping backend.\nCreates a new empty address space.\nCreates a new linear mapping backend.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nReturns the reference to the inner page table.\nReturns the root physical address of the inner page table.\nConverts a host physical address to a host virtual address.\nRead a buffer from guest memory\nRead a buffer from guest memory\nRead a value of type V from guest memory\nRead a value of type V from guest memory\nRead a volatile value from guest memory (for device …\nRead a volatile value from guest memory (for device …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nReturns the address space size.\nThe lower bound of the range (inclusive).\nThe lower bound of the range (inclusive).\nGet the starting physical address of the frame.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nTranslates the given <code>VirtAddr</code> into <code>PhysAddr</code>.\nTranslate a guest physical address to host physical …\nTranslates the given <code>VirtAddr</code> into <code>PhysAddr</code>, and returns …\nTranslate&amp;Copy the given <code>VirtAddr</code> with LENGTH len to a …\nCreate an uninitialized <code>PhysFrame</code>.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nRemoves mappings within the specified virtual address …\nConverts a host virtual address to a host physical address.\nWrite a buffer to guest memory\nWrite a buffer to guest memory\nWrite a value of type V to guest memory\nWrite a value of type V to guest memory\nWrite a volatile value to guest memory (for device …\nWrite a volatile value to guest memory (for device …\nA phantom data for the paging handler.\n<code>vaddr - paddr</code>.\nWhether to populate the physical frames when creating the …\nThe width of an access.\nThe address type of the range.\n8-bit access.\nAn address-like type that can be used to access devices.\nA range of device addresses. It may be contiguous or not.\n32-bit access.\nThe port number of an I/O operation.\nA inclusive range of port numbers.\n64-bit access.\nA system register address.\nA inclusive range of system register addresses.\n16-bit access.\nReturns the address.\nReturns the range of bits that the access covers.\nReturns whether the address range contains the given …\nThe end address of the range.\nThe end port number of the range.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>SysRegAddrRange</code> instance.\nCreates a new <code>PortRange</code> instance.\nCreates a new <code>Port</code> instance.\nCreates a new <code>SysRegAddr</code> instance.\nReturns the port number.\nReturns the size of the access in bytes.\nThe start address of the range.\nThe start port number of the range.")